name: Build and deploy Docker app to Azure
on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      comments:
        description: Comments
        type: string
        required: false

env:
  LOGANALYTICSWORKSPACENAME: azure-containers-demo-la
  CONTAINERNAME: azure-containers-demo-instance
  APPNAME: azure-containers-demo-webapp
  APPLICATIONPATH: Application
  HOSTINGPLAN: azure-containers-demo-webapp
  DOCKERFILEPATH: "Application/aspnet-core-dotnet-core"
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "azurecontainersdemoacr13579"
  IMAGENAME: "azurecontainersdemowebappc580"
  RESOURCEGROUPNAME: azure-containers-demo-rg
  LOCATION: eastus
  SUBSCRIPTIONID: 15561d27-5df0-4f7b-9cb8-a4a771b9fd71
  SKU: S1 Standard
  AKSCLUSTERNAME: azure-containers-demo-aks
  DNSLABEL: v1aspnet
  ACANAME: v1aspnet-aca 
  ACAENAME: azure-containers-demo-acae
  ASANAME: azure-containers-demo-asa
  ACIBGCOLOR: "#FF9100"
  APSBGCOLOR: "#FF00FF"
  AKSBGCOLOR: "#179C00"
  ACABGCOLOR: "#009C17"
  ASABGCOLOR: "#9C0017"

jobs:
  build:
    name: Build and push to ACR
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Resource Group
      run: |
        if [ $(az group exists --name ${{ env.RESOURCEGROUPNAME }}) = false ]; then
          az group create -n ${{ env.RESOURCEGROUPNAME }} -l ${{ env.LOCATION }}
        fi

    - name: Build and Run unit tests 
      run: | 
            pushd ${{ env.APPLICATIONPATH }}
            dotnet restore
            dotnet build --configuration Release
            dotnet test aspnet-core-dotnet-core.UnitTests/aspnet-core-dotnet-core.UnitTests.csproj  --verbosity normal
            popd

    - name: Install Helm
      uses: azure/setup-helm@v1
      id: installHelm

    - name: Package Helm Chart
      run: |
        pushd Charts/aspnet-core-dotnet-core
        helm package . --version 1.0
        popd

    - name: Upload Helm Chart Artifact
      uses: actions/upload-artifact@v2
      with:
        name: helm-chart
        path: Charts/aspnet-core-dotnet-core/*.tgz

    # Create Azure container registry
    - uses: azure/arm-deploy@v1
      id: createAzureSharedResources
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/shared-resources-template.json
        parameters: registryName="${{ env.REGISTRYNAME }}" registryLocation="${{ env.LOCATION }}" registrySku="${{ env.REGISTRYSKU }}" logAnalyticsWorkspaceName="${{ env.LOGANALYTICSWORKSPACENAME }}"

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: ACR authentication
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRYNAME }}.azurecr.io
        username: ${{ steps.acrCredentials.outputs.acr_username }}
        password: ${{ steps.acrCredentials.outputs.acr_password }}

    - name: Docker Build & Push to ACR
      run: |
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.acrCredentials.outputs.acr_username }} --password ${{ steps.acrCredentials.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE/${{env.DOCKERFILEPATH}}" -f  "${{env.DOCKERFILEPATH}}/Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}

  deployContainerInstance:
    name: Deploy to Container Instance
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/container-instance-template.json
        parameters: containerName="${{ env.CONTAINERNAME }}" imageName="${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}" registryName="${{ env.REGISTRYNAME }}"  registryUsername="${{ steps.acrCredentials.outputs.acr_username }}" registryPassword="${{ steps.acrCredentials.outputs.acr_password }}" backgroundColor="${{ env.ACIBGCOLOR }}"

    - name: Retrieve URL
      run: |
        echo "Azure Container Instance URL:"
        url=`az container show --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.CONTAINERNAME }} --query "ipAddress.fqdn" --out TSV`
        echo "http://$url"

  deployAks:
    name: Deploy to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/aks-template.json
        parameters: clusterName="${{ env.AKSCLUSTERNAME }}" dnsPrefix="${{ env.AKSCLUSTERNAME }}" logAnalyticsWorkspaceName="${{ env.LOGANALYTICSWORKSPACENAME }}" registryName="${{ env.REGISTRYNAME }}"

    - name: Attach AKS to ACR
      id: connectAksToAcr
      continue-on-error: false
      run: |
          az aks update -n ${{ env.AKSCLUSTERNAME }} -g ${{ env.RESOURCEGROUPNAME }} --attach-acr ${{ env.REGISTRYNAME }}

    - name: Download Helm Chart
      uses: actions/download-artifact@v2
      with:
        name: helm-chart

    - name: Install Helm
      uses: azure/setup-helm@v1
      id: installHelm

    - name: Install Helm Chart
      run: |
        az aks get-credentials -n ${{ env.AKSCLUSTERNAME }} -g ${{ env.RESOURCEGROUPNAME }}
        helm upgrade v1 aspnet-core-dotnet-core-1.0.tgz --set applicationConfiguration.backgroundColor="${{ env.AKSBGCOLOR }}" --set ingress.fqdn="${{ steps.deploy.outputs.applicationRoutingZone }}" --set image.server="${{ env.REGISTRYNAME }}.azurecr.io" --set image.tag="${{ github.sha }}" --set ingress.host="${{ env.DNSLABEL }}" -i --wait --timeout 15m0s
        echo "http://${{ env.DNSLABEL }}.${{ steps.deploy.outputs.applicationRoutingZone }}"

  deployAppService:
    name: Deploy to App Service
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/container-webapp-template.json
        parameters: webAppName="${{ env.APPNAME }}" hostingPlanName="${{ env.HOSTINGPLAN }}" sku="${{ env.SKU }}" appInsightsLocation="${{ env.LOCATION }}" registryName="${{ env.REGISTRYNAME }}" imageName="${{ env.IMAGENAME }}" registryLocation="${{ env.LOCATION }}" registrySku="${{ env.REGISTRYSKU }}" logAnalyticsWorkspaceName="${{ env.LOGANALYTICSWORKSPACENAME }}" backgroundColor="${{ env.APSBGCOLOR }}"
 
    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`" 

    - name: 'Deploy to Azure Web App for Container'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.APPNAME }} 
        images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
  
  deployAzureContainerApp:
    name: Deploy to Container Apps
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: Install Azure Container App CLI Extension
      id: installAcaCliExtension
      run: |
        az extension add --source https://workerappscliextension.blob.core.windows.net/azure-cli-extension/containerapp-0.2.0-py2.py3-none-any.whl -y
        az provider register --namespace Microsoft.Web

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/aca-template.json
        parameters: name="${{ env.ACANAME }}" registryUrl="${{ env.REGISTRYNAME }}.azurecr.io" registryUsername="${{ steps.acrCredentials.outputs.acr_username }}" registryPassword="${{ steps.acrCredentials.outputs.acr_password }}" repositoryName="${{ env.IMAGENAME }}" imageTag="${{ github.sha }}" environmentName="${{ env.ACAENAME }}" workspaceName="${{ env.LOGANALYTICSWORKSPACENAME }}" backgroundColor="${{ env.ACABGCOLOR }}"

    - name: Retrieve URL
      run: |
        echo "Azure Container Instance URL:"
        url=`az containerapp show --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.ACANAME }} --query "configuration.ingress.fqdn" --out TSV`
        echo "http://$url"

  deployAzureSpringApps:
    name: Deploy to Spring Apps
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
        echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
        echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
        echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
    
    - name: Create Spring App Service
      id: createASA
      continue-on-error: false
      run: |
        az config set extension.use_dynamic_install=yes_without_prompt
        
        az spring create \
          --resource-group ${{ env.RESOURCEGROUPNAME }} \
          --name ${{ env.ASANAME }} \
          --sku enterprise \
          --enable-application-configuration-service \
          --enable-service-registry \
          --enable-gateway \
          --enable-api-portal
        
        asaid=`az spring show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.ASANAME }} --query id --output tsv`
        lawid=`az monitor log-analytics workspace show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.LOGANALYTICSWORKSPACENAME }} --query id --output tsv`        

        az monitor diagnostic-settings create \
          --name "send-logs-and-metrics-to-log-analytics" \
          --resource $asaid \
          --workspace $lawid \
          --logs '[
              {
                "category": "ApplicationConsole",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                  "category": "SystemLogs",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                },
              {
                  "category": "IngressLogs",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                }
            ]' \
            --metrics '[
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]'
            
        az spring app create \
          --resource-group ${{ env.RESOURCEGROUPNAME }} \
          --name ${{ env.DNSLABEL }} \
          --service ${{ env.ASANAME }}
        
        az spring app deploy \
          --resource-group ${{ env.RESOURCEGROUPNAME }} \
          --name ${{ env.DNSLABEL }} \
          --container-image "${{ env.IMAGENAME }}:${{ github.sha }}" \
          --service ${{ env.ASANAME }}
          --container-registry "${{ env.REGISTRYNAME }}.azurecr.io" \
          --registry-password "${{ steps.acrCredentials.outputs.acr_username }}" |
          --registry-username "${{ steps.acrCredentials.outputs.acr_password }}"
