name: Build and deploy

on:
  workflow_dispatch:
    inputs:
      location:
        description: 'Region'
        required: true
        default: 'eastus'
        type: choice
        options:
          - eastus
          - eastus2
          - westus
          - westus2
      include_aci:
        description: 'Deploy to Azure Container Instances'
        required: true
        default: true
        type: boolean
      include_appservice:
        description: 'Deploy to Azure App Service'
        required: true
        default: true
        type: boolean
      include_aca:
        description: 'Deploy to Azure Container App'
        required: true
        default: true
        type: boolean
      include_aks:
        description: 'Deploy to Azure Kubernetes Service'
        required: true
        default: true
        type: boolean
      include_asa:
        description: 'Deploy to Azure Spring App'
        required: true
        default: true
        type: boolean
      comments:
        description: Comments
        type: string
        required: false

env:
  LOGANALYTICSWORKSPACENAME: azure-containers-demo-la
  APPINSIGHTSNAME: azure-containers-demo-ai
  CONTAINERNAME: azure-containers-demo-instance
  APPNAME: azure-containers-demo-webapp
  APPLICATIONPATH: Application
  HOSTINGPLAN: azure-containers-demo-webapp
  DOCKERFILEPATH: "Application/aspnet-core-dotnet-core"
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "azurecontainersdemoacr13579"
  IMAGENAME: "azurecontainersdemowebappc580"
  RESOURCEGROUPNAME: azure-containers-demo-rg
  LOCATION: ${{ inputs.location }}
  SKUTIER: PremiumV3
  SKUNAME: P1v3
  AKSCLUSTERNAME: azure-containers-demo-aks
  DNSLABEL: v1aspnet
  ACANAME: v1aspnet-aca 
  ACAENAME: azure-containers-demo-acae
  ASANAME: azure-containers-demo-asa
  ACIBGCOLOR: "#FF9100"
  APSBGCOLOR: "#FF00FF"
  AKSBGCOLOR: "#179C00"
  ACABGCOLOR: "#009C17"
  ASABGCOLOR: "#9C0017"

jobs:
  build:
    name: Build and push to ACR
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '3.1'

    - name: Build and Run unit tests 
      run: | 
            pushd ${{ env.APPLICATIONPATH }}
            dotnet restore
            dotnet build --configuration Release
            dotnet test aspnet-core-dotnet-core.UnitTests/aspnet-core-dotnet-core.UnitTests.csproj  --verbosity normal
            popd

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Resource Group
      run: |
        if [ $(az group exists --name ${{ env.RESOURCEGROUPNAME }}) = false ]; then
          az group create -n ${{ env.RESOURCEGROUPNAME }} -l ${{ env.LOCATION }}
        fi

    # Create Azure container registry
    - uses: azure/arm-deploy@v1
      id: createAzureSharedResources
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/shared-resources-template.json
        parameters: registryName="${{ env.REGISTRYNAME }}" registryLocation="${{ env.LOCATION }}" registrySku="${{ env.REGISTRYSKU }}" logAnalyticsWorkspaceName="${{ env.LOGANALYTICSWORKSPACENAME }}" appInsightsName="${{ env.APPINSIGHTSNAME }}"

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          echo "ACR_USERNAME=`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`" >> $GITHUB_OUTPUT
          echo "ACR_PASSWORD=`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`" >> $GITHUB_OUTPUT

    - name: ACR authentication
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRYNAME }}.azurecr.io
        username: ${{ steps.acrCredentials.outputs.ACR_USERNAME }}
        password: ${{ steps.acrCredentials.outputs.ACR_PASSWORD }}

    - name: Docker Build & Push to ACR
      run: |
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.acrCredentials.outputs.acr_username }} --password ${{ steps.acrCredentials.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE/${{env.DOCKERFILEPATH}}" -f  "${{env.DOCKERFILEPATH}}/Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}

  deployContainerInstance:
    name: Deploy to Container Instance
    needs: build
    runs-on: ubuntu-latest
    if:  ${{ inputs.include_aci }} 
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/container-instance-template.json
        parameters: containerName="${{ env.CONTAINERNAME }}" imageName="${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}" registryName="${{ env.REGISTRYNAME }}"  backgroundColor="${{ env.ACIBGCOLOR }}"

    - name: Retrieve URL
      run: |
        url=`az container show --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.CONTAINERNAME }} --query "ipAddress.fqdn" --out TSV`
        echo "http://$url"

  deployAks:
    name: Deploy to AKS
    needs: build
    runs-on: ubuntu-latest
    if:  ${{ inputs.include_aks }} 
    timeout-minutes: 3600
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Fetch AKS Version
      id: aksVersion
      continue-on-error: false
      run: |
          echo "version=`az aks get-versions -l ${{ env.LOCATION }} --query "orchestrators[?default].orchestratorVersion" --output tsv`" >> $GITHUB_OUTPUT

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/aks-template.json
        parameters: clusterName="${{ env.AKSCLUSTERNAME }}" dnsPrefix="${{ env.AKSCLUSTERNAME }}" logAnalyticsWorkspaceName="${{ env.LOGANALYTICSWORKSPACENAME }}" kubernetesVersion="${{ steps.aksVersion.outputs.version }}"

    - name: Attach AKS to ACR
      id: attachAksToAcr
      continue-on-error: false
      run: az aks update -n "${{ env.AKSCLUSTERNAME }}" -g "${{ env.RESOURCEGROUPNAME }}" --attach-acr "${{ env.REGISTRYNAME }}"

    - name: Install Helm
      uses: azure/setup-helm@v1
      id: installHelm
      with:
        version: v3.10.3

    - name: Install Helm Chart
      run: |
        pushd Charts/aspnet-core-dotnet-core
        helm package . --version 1.0
        az aks get-credentials -n ${{ env.AKSCLUSTERNAME }} -g ${{ env.RESOURCEGROUPNAME }}
        helm upgrade v1 aspnet-core-dotnet-core-1.0.tgz --set applicationConfiguration.backgroundColor="${{ env.AKSBGCOLOR }}" --set ingress.fqdn="${{ steps.deploy.outputs.applicationRoutingZone }}" --set image.server="${{ env.REGISTRYNAME }}.azurecr.io" --set image.tag="${{ github.sha }}" --set ingress.host="${{ env.DNSLABEL }}" -i --wait --timeout 15m0s
        popd

    - name: Retrieve URL
      run: |
        echo "http://${{ env.DNSLABEL }}.${{ steps.deploy.outputs.applicationRoutingZone }}"
        
  deployAppService:
    name: Deploy to App Service
    needs: build
    runs-on: ubuntu-latest
    if:  ${{ inputs.include_appservice }} 
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/container-webapp-template.json
        parameters: webAppName="${{ env.APPNAME }}" hostingPlanName="${{ env.HOSTINGPLAN }}" skuTier="${{ env.SKUTIER }}" skuName="${{ env.SKUNAME }}" registryName="${{ env.REGISTRYNAME }}" imageName="${{ env.IMAGENAME }}" registryLocation="${{ env.LOCATION }}" registrySku="${{ env.REGISTRYSKU }}" appInsightsName="${{ env.APPINSIGHTSNAME }}" backgroundColor="${{ env.APSBGCOLOR }}"
 
    - name: 'Deploy to Azure Web App for Container'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.APPNAME }} 
        images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
  
  deployAzureContainerApp:
    name: Deploy to Container Apps
    needs: build
    runs-on: ubuntu-latest
    if:  ${{ inputs.include_aca }} 
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install Azure Container App CLI Extension
      id: installAcaCliExtension
      run: |
        az extension add --name containerapp --upgrade -y
        az provider register --namespace Microsoft.Web

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/aca-template.json
        parameters: name="${{ env.ACANAME }}" registryName="${{ env.REGISTRYNAME }}" repositoryName="${{ env.IMAGENAME }}" imageTag="${{ github.sha }}" environmentName="${{ env.ACAENAME }}" workspaceName="${{ env.LOGANALYTICSWORKSPACENAME }}" backgroundColor="${{ env.ACABGCOLOR }}"

    - name: Retrieve URL
      run: |
        echo "Azure Container Instance URL:"
        url=`az containerapp show --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.ACANAME }} --query "properties.configuration.ingress.fqdn" --out TSV`
        echo "http://$url"

  deployAzureSpringApps:
    name: Deploy to Spring Apps
    needs: build
    runs-on: ubuntu-latest
    if:  ${{ inputs.include_asa }} 
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
        echo "ACR_USERNAME=`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`" >> $GITHUB_OUTPUT
        echo "ACR_PASSWORD=`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`" >> $GITHUB_OUTPUT

    - name: Deploy Service
      uses: azure/arm-deploy@v1
      id: deployService
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/asa-template.json
        parameters: serviceName="${{ env.ASANAME }}" appName="${{ env.DNSLABEL }}" logAnalyticsWorkspaceName="${{ env.LOGANALYTICSWORKSPACENAME }}" appInsightsName="${{ env.APPINSIGHTSNAME }}" backgroundColor="${{ env.ASABGCOLOR }}" registryServer="${{ env.REGISTRYNAME }}.azurecr.io" registryUsername="${{ steps.acrCredentials.outputs.ACR_PASSWORD }}" registryPassword="${{ steps.acrCredentials.outputs.ACR_USERNAME }}" containerImage="${{ env.IMAGENAME }}:${{ github.sha }}"

    # - name: Deploy Spring App
    #   id: deployApp
    #   continue-on-error: false
    #   run: |
    #     az extension add --name spring
        
    #     az spring app deploy \
    #       --resource-group ${{ env.RESOURCEGROUPNAME }} \
    #       --name ${{ env.DNSLABEL }} \
    #       --container-image "${{ env.IMAGENAME }}:${{ github.sha }}" \
    #       --service ${{ env.ASANAME }} \
    #       --container-registry "${{ env.REGISTRYNAME }}.azurecr.io" \
    #       --registry-password "${{ steps.acrCredentials.outputs.ACR_PASSWORD }}" \
    #       --registry-username "${{ steps.acrCredentials.outputs.ACR_USERNAME }}"

    #     az spring app deployment create \
    #       -g ${{ env.RESOURCEGROUPNAME }} \
    #       --service ${{ env.ASANAME }} \
    #       --app ${{ env.DNSLABEL }} \
    #       --name v1 \
    #       --container-image "${{ env.IMAGENAME }}:${{ github.sha }}"

    #     az spring app update -n ${{ env.DNSLABEL }} \
    #       -g ${{ env.RESOURCEGROUPNAME }} \
    #       --service ${{ env.ASANAME }} \
    #       --env ApplicationConfiguration__Host="Azure Spring Apps" \
    #       --env ApplicationConfiguration__BackgroundColor="${{ env.ASABGCOLOR }}" \
    #       --env ASPNETCORE_URLS="http://+:1025/" \
    #       --assign-endpoint true

    - name: Retrieve URL
      run: |
        az spring app show -g ${{ env.RESOURCEGROUPNAME }} \
          --service ${{ env.ASANAME }} \
          -n ${{ env.DNSLABEL }} \
          --query "properties.url" -o TSV

  cleanup:
    name: Clean Up
    needs: [deployContainerInstance, deployAks, deployAppService, deployAzureContainerApp, deployAzureSpringApps]
    runs-on: ubuntu-latest
    environment: 'cleanup'
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete Log Analytics Workspace
      continue-on-error: true
      run: |
        az monitor log-analytics workspace delete -g ${{ env.RESOURCEGROUPNAME }} \
          --workspace-name ${{ env.LOGANALYTICSWORKSPACENAME }} \
          --force true --yes

    - name: Delete Resource Group
      continue-on-error: true
      run: |
        az group delete -g ${{ env.RESOURCEGROUPNAME }} --yes
